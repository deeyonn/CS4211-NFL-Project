//@@National Football League Model@@//

// NOTE: Work in progress.

/* 

Field dimensions: 53.333 yards by 120 yards
Goal dimensions: 18.6 feet wide, approximately 6 yards

+----------------------#------#------------------------+
|                                                      |
|                                                      |
+-----------------=------------------=-----------------+
|                 =                  =                 |
+----10-----------=------------------=-----------10----+
|                 =                  =                 |
+----20-----------=------------------=-----------20----+
|                 =                  =                 |
+----30-----------=------------------=-----------30----+
|                 =                  =                 |
+----40-----------=------------------=-----------40----+
|                 =                  =                 |
+----50-----------=------------------=-----------50----+
|                 =                  =                 |
+----40-----------=------------------=-----------40----+
|                 =                  =                 |
+----30-----------=------------------=-----------30----+
|                 =                  =                 |
+----20-----------=------------------=-----------20----+
|                 =                  =                 |
+----10-----------=------------------=-----------10----+
|                 =                  =                 |
+-----------------=------------------=-----------------+
|                                                      |
|                                                      |
+-----------------------#------#-----------------------+

*/

//---- Initialization ----//

// The current down for the attacking team. Range from 1 to 4.
var down = 1;

/* Starting position for the attacking team.
We split the field into 10 yard bins, so the starting position is the bin number.
The attacking team starts at the 20 yard line, so the starting bin is 2. */
var start_bin = 2;

// Score condition
#define score start_bin == 10;

// Game over condition. Game is modeled as over when the attacking team has 
// used all 4 downs or has scored.
#define GameOver down > 4 || score;

/* Actions (plays) available per down. These can be extended in the future.
run_refresh and pass_refresh are used to model a run or pass that refreshes
the down. This is to model the fact that a team can run or pass multiple times
in a row without losing the ball but have not gained enough yards for a first down. */
enum { run, pass, kick, run_refresh, pass_refresh };

//---- End Initialization ----//

//---- Probabilities ----//

/* For this simple model, we have 4 different sets of probabilities for the
attacking team. The probabilities are defined in the form of p_play_x_y,
where x is the down number and y is the half of the field. We need to model the
fact that teams have conservative play calling in the first half of the
field, and aggressive play calling in the second half of the field. In addition,
the 4th down where the team is more likely to kick the ball.
We might extend it to consider the bin number in y. */

#define p_run_1_1 70;
#define p_pass_1_1 20;
#define p_kick_1_1 1;
#define p_run_refresh_1_1 5;
#define p_pass_refresh_1_1 4;

#define p_run_1_2 50;
#define p_pass_1_2 30;
#define p_kick_1_2 5;
#define p_run_refresh_1_2 3;
#define p_pass_refresh_1_2 2;

#define p_run_4_1 10;
#define p_pass_4_1 15;
#define p_kick_4_1 60;
#define p_run_refresh_4_1 5;
#define p_pass_refresh_4_1 5;

#define p_run_4_2 5;
#define p_pass_4_2 10;
#define p_kick_4_2 70;
#define p_run_refresh_4_2 3;
#define p_pass_refresh_4_2 2;

//---- End Probabilities ----//

GuardedDown = [!GameOver]Go->ExecuteDown;

// Guarded process that only runs the next down if the attacking team has not completed all 4.
NextPlay = GuardedDown[][GameOver] Skip;

// Function to simulate a single down. Only executes if the attacking team has not used all 4 downs.
ExecuteDown = case {
	down < 4: case {
		// If the attacking team is in the first half of the field, 
		// use the first set of probabilities.
		start_bin < 5: pcase {
			// Select a play based on the probabilities defined above.
			// If the play is a "refresh" play, reset the down to 1 and increment the start_bin.
			// Otherwise, increment the down.
			p_run_1_1: { down++; } -> NextPlay
			p_pass_1_1: { down++; } -> NextPlay
			p_kick_1_1: { down = 5; } -> NextPlay // Game over
			p_run_refresh_1_1: { down = 1; start_bin++ } -> NextPlay
			p_pass_refresh_1_1: { down = 1; start_bin++ } -> NextPlay
		}
		start_bin >= 5: pcase {
			p_run_1_2: { down++; } -> NextPlay
			p_pass_1_2: { down++; } -> NextPlay
			p_kick_1_2: { down = 5; } -> NextPlay // Game over
			p_run_refresh_1_2: { down = 1; start_bin++ } -> NextPlay
			p_pass_refresh_1_2: { down = 1; start_bin++ } -> NextPlay
		}
	}
	down == 4: case {
		start_bin < 5: pcase {
			p_run_4_1: { down++; } -> NextPlay
			p_pass_4_1: { down++; } -> NextPlay
			p_kick_4_1: { down = 5; } -> NextPlay // Game over
			p_run_refresh_4_1: { down = 1; start_bin++ } -> NextPlay
			p_pass_refresh_1_1: { down = 1; start_bin++ } -> NextPlay
		}
		start_bin >= 5: pcase {
			p_run_4_2: { down++; } -> NextPlay
			p_pass_4_2: { down++; } -> NextPlay
			p_kick_4_2: { down = 5; } -> NextPlay // Game over
			p_run_refresh_4_2: { down = 1; start_bin++ } -> NextPlay
			p_pass_refresh_4_2: { down = 1; start_bin++ } -> NextPlay
		}
	}
};

# assert NextPlay deadlockfree;
# assert NextPlay reaches score with prob;