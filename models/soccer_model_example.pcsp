// NOTE: This will only produce probabilities of goal when the away team attacks while the home team defends 
// A similar pcsp file will have to be generated from the home team POV to meaningfully compare which team has the 
// higher chance of scoring during an attack

// Position of players in grid
// Left, LeftRight, and CenterLeft etc.
#define LEFT 6;
#define LEFT_RIGHT 7;
#define CENTER_LEFT 8;
#define CENTER 9;
#define CENTER_RIGHT 10;
#define RIGHT_LEFT 11;
#define RIGHT 12;

// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// Danger level for the attacking team
// The lower the value, the lesser the danger
var danger = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley, and Header
enum { SHORT_PASS, LONG_PASS, LONG_SHOT, FINISHING, VOLLEY, HEADER };

// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position
var atkKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];
var atkDefPos = [-1(6), 1, 0, 1, 0, 1, 0, 1, -1(6)];
var atkMidPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var atkForPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var defKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

///////////// AWAY TEAM PLAYERS (Attacking Team) /////////////
// The parameters represent the probabilities specific to the player 
// The guard only allows eligible players to get the ball, see Individual Positions section for more info

// For example keepers can only ShortPass or LongPass
// Here 64, 64 represents the FIFA ShortPass and LongPass ratings for this particular player
AtkKep = [
pos[CENTER] == 1]Kep_1(64, 64, CENTER);

// Here for the defenders, the first 3 parameters are with respect to the ShortPass, LongPass, and prob. to lose the 
// ball respectively 
// The prob. to lose the ball for the attacking team's defenders was calculated based on the defending team forward's 
// player ratings 
// In particular, the probability to lose the ball was a weighted combination of the standing tackle, sliding tackle, 
// and interception FIFA player ratings of the forwards
AtkDef = [pos[RIGHT] == 1]Def(73, 71, 38, RIGHT)[]
					[pos[CENTER_RIGHT] == 1]Def(68, 63, 38, CENTER_RIGHT)[]
					[pos[CENTER_LEFT] == 1]Def(68, 63, 38, CENTER_LEFT)[]
					[pos[LEFT] == 1]Def(72, 59, 38, LEFT);

// Similar to defenders, midfielders and forwards have their own specific parameters
// See their processes below for more information on what those parameters are
// The prob. to lose for the attacking team's midfielders is based on the defending team's midfielders
// The prob. to lose for the attacking team's forwards is based on the defending team's defenders
AtkMid = [pos[RIGHT_LEFT] == 1]Mid(79, 76, 74, 59, RIGHT_LEFT)[]
					[pos[CENTER] == 1]Mid(83, 80, 57, 59, CENTER)[]
					[pos[LEFT_RIGHT] == 1]Mid(78, 73, 75, 59, LEFT_RIGHT);

AtkFor = [pos[RIGHT_LEFT] == 1]For(77, 75, 74, 77, 75, RIGHT_LEFT)[]
					[pos[CENTER] == 1]For(75, 73, 66, 76, 75, CENTER)[]
					[pos[LEFT_RIGHT] == 1]For(73, 65, 65, 69, 75, LEFT_RIGHT);

///////////// HOME TEAM PLAYERS (Defending Team) /////////////
// Home team defenders, midfielders and forwards are already implicitly "defending" via the prob. to lose the ball parameter
DefKep = [pos[CENTER] == 1]Kep_2(72, CENTER);

///////////// Individual Positions /////////////
// There is a guard to every action (action.g., shortPass) a player can take
// The guard makes sure that there are players eligible to receive the ball should that action happen
// Furthermore, based on the type of action taken, only some players will be eligible to receive the ball
// E.g., If a defender at LEFT does a shortPass, the midfielder at RIGHT should not be able to receive it
// The eligible players are updated with UpdatePos

Kep_1(short_pass, long_pass, position) = [
	atkDefPos[position - 2] == 1 ||
	atkDefPos[position - 1] == 1 ||
	atkDefPos[position] == 1 ||
	atkDefPos[position + 1] == 1 ||
	atkDefPos[position + 2] == 1
]
shortPass->pcase {
short_pass: pass->UpdatePos(position, SHORT_PASS); AtkDef
	100 - short_pass: intercepted{
		danger = 5;
	} -> Skip
}
[][
	atkDefPos[position-6] == 1 ||
	atkDefPos[position - 5] == 1 ||
	atkDefPos[position - 4] == 1 ||
	atkDefPos[position - 3] == 1 ||
	atkDefPos[position + 3] == 1 ||
	atkDefPos[position + 4] == 1 ||
	atkDefPos[position + 5] == 1 ||
	atkDefPos[position + 6] == 1
]
longPass->pcase {
long_pass: pass->UpdatePos(position, LONG_PASS); AtkDef
	100 - long_pass: intercepted{
		danger = 5;
	} -> Skip
};

Def(short_pass, long_pass, lose_ball, position) = [
	atkMidPos[position - 2] == 1 ||
	atkMidPos[position - 1] == 1 ||
	atkMidPos[position] == 1 ||
	atkMidPos[position + 1] == 1 ||
	atkMidPos[position + 2] == 1
]
shortPass->pcase {
short_pass: pass->UpdatePos(position, SHORT_PASS); AtkMid
lose_ball: tackled{
		danger = 4;
	} -> Skip
}
[][
	atkMidPos[position-6] == 1 ||
	atkMidPos[position - 5] == 1 ||
	atkMidPos[position - 4] == 1 ||
	atkMidPos[position - 3] == 1 ||
	atkMidPos[position + 3] == 1 ||
	atkMidPos[position + 4] == 1 ||
	atkMidPos[position + 5] == 1 ||
	atkMidPos[position + 6] == 1
]
longPass->pcase {
long_pass: pass->UpdatePos(position, LONG_PASS); AtkMid
lose_ball: tackled{
		danger = 4;
	} -> Skip
};

Mid(short_pass, long_pass, long_shot, lose_ball, position) = [
	atkForPos[position - 2] == 1 ||
	atkForPos[position - 1] == 1 ||
	atkForPos[position] == 1 ||
	atkForPos[position + 1] == 1 ||
	atkForPos[position + 2] == 1
]
shortPass->pcase {
short_pass: pass->UpdatePos(position, SHORT_PASS); AtkFor
lose_ball: tackled{
		danger = 3;
	} -> Skip
}
[][
	atkForPos[position-6] == 1 ||
	atkForPos[position - 5] == 1 ||
	atkForPos[position - 4] == 1 ||
	atkForPos[position - 3] == 1 ||
	atkForPos[position + 3] == 1 ||
	atkForPos[position + 4] == 1 ||
	atkForPos[position + 5] == 1 ||
	atkForPos[position + 6] == 1
]
longPass->pcase {
long_pass: pass{ inAir = true; } -> UpdatePos(position, LONG_PASS); AtkFor
lose_ball: tackled{
		danger = 3;
	} -> Skip
}
[][
	defKepPos[CENTER] == 1
]
longShot->pcase {
long_shot: shoot->UpdatePos(position, LONG_SHOT); DefKep
lose_ball: tackled{
		danger = 3;
	} -> Skip
};

For(short_pass, long_shot, volley_shot, header_shot, lose_ball, position) = [
	defKepPos[CENTER] == 1
]
finish->pcase {
short_pass: shoot->UpdatePos(position, FINISHING); DefKep
lose_ball: tackled{
		danger = 2;
	} -> Skip
}
[][
	defKepPos[CENTER] == 1
]
longShot->pcase {
long_shot: shoot->UpdatePos(position, LONG_SHOT); DefKep
lose_ball: tackled{
		danger = 2;
	} -> Skip
}
[][
	defKepPos[CENTER] == 1 && inAir == true
	]
volley->pcase {
volley_shot: shoot->UpdatePos(position, VOLLEY); DefKep
lose_ball: tackled{
		danger = 2;
	} -> Skip
}
[][
	defKepPos[CENTER] == 1 && inAir == true
	]
header->pcase {
header_shot: shoot->UpdatePos(position, HEADER); DefKep
lose_ball: tackled{
		danger = 2;
	} -> Skip
};

Kep_2(short_pass, position) = attemptSave->pcase {
short_pass: save{
		danger = 1;
	} -> Skip
	100 - short_pass: concede->Skip
};

UpdatePos(position, action) = case
{
position == LEFT:
		case
		{
		action == SHORT_PASS:
		{
	pos[LEFT] = 1;
	pos[LEFT_RIGHT] = 1;
	pos[CENTER_LEFT] = 1;
	pos[CENTER] = 0;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
			action == LONG_PASS: {
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 1;
	pos[RIGHT_LEFT] = 1;
	pos[RIGHT] = 1;
} -> Skip
			default: {
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
		}
	position == LEFT_RIGHT:
		case
		{
		action == SHORT_PASS:
		{
	pos[LEFT] = 1;
	pos[LEFT_RIGHT] = 1;
	pos[CENTER_LEFT] = 1;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
			action == LONG_PASS: {
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 0;
	pos[CENTER_RIGHT] = 1;
	pos[RIGHT_LEFT] = 1;
	pos[RIGHT] = 1;
} -> Skip
			default: {
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
		}
	position == CENTER_LEFT: 
		case
		{
		action == SHORT_PASS:
		{
	pos[LEFT] = 1;
	pos[LEFT_RIGHT] = 1;
	pos[CENTER_LEFT] = 1;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 1;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
			action == LONG_PASS: {
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 0;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 1;
	pos[RIGHT] = 1;
} -> Skip
			default: {
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
		}
	position == CENTER:
		case
		{
			action == SHORT_PASS:
			{
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 1;
	pos[CENTER_LEFT] = 1;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 1;
	pos[RIGHT_LEFT] = 1;
	pos[RIGHT] = 0;
} -> Skip
			action == LONG_PASS: {
	pos[LEFT] = 1;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 0;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 1;
} -> Skip
			default: {
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
		}	
	position == CENTER_RIGHT:
		case
		{
		action == SHORT_PASS:
		{
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 1;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 1;
	pos[RIGHT_LEFT] = 1;
	pos[RIGHT] = 1;
} -> Skip
			action == LONG_PASS: {
	pos[LEFT] = 1;
	pos[LEFT_RIGHT] = 1;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 0;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
			default: {
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
		}
	position == RIGHT_LEFT:
		case
		{
		action == SHORT_PASS:
		{
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 1;
	pos[RIGHT_LEFT] = 1;
	pos[RIGHT] = 1;
} -> Skip
			action == LONG_PASS: {
	pos[LEFT] = 1;
	pos[LEFT_RIGHT] = 1;
	pos[CENTER_LEFT] = 1;
	pos[CENTER] = 0;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
			default: {
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
		}
	default:
		case
		{
		action == SHORT_PASS:
		{
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 0;
	pos[CENTER_RIGHT] = 1;
	pos[RIGHT_LEFT] = 1;
	pos[RIGHT] = 1;
} -> Skip
			action == LONG_PASS: {
	pos[LEFT] = 1;
	pos[LEFT_RIGHT] = 1;
	pos[CENTER_LEFT] = 1;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
			default: {
	pos[LEFT] = 0;
	pos[LEFT_RIGHT] = 0;
	pos[CENTER_LEFT] = 0;
	pos[CENTER] = 1;
	pos[CENTER_RIGHT] = 0;
	pos[RIGHT_LEFT] = 0;
	pos[RIGHT] = 0;
} -> Skip
		}
};

#define Goal0 danger <= 0;
#define Goal1 danger <= 1;
#define Goal2 danger <= 2;
#define Goal3 danger <= 3;
#define Goal4 danger <= 4;
# assert AtkKep deadlockfree;
# assert AtkKep |= F G Goal0 with prob;
# assert AtkKep |= F G Goal1 with prob;
# assert AtkKep |= F G Goal2 with prob;
# assert AtkKep |= F G Goal3 with prob;
# assert AtkKep |= F G Goal4 with prob;