//@@National Football League Model@@//

// NOTE: Work in progress.

/* 

Field dimensions: 53.333 yards by 120 yards
Goal dimensions: 18.6 feet wide, approximately 6 yards

+----------------------#------#------------------------+
|                                                      |
|                        bin 10                        |
+-----------------=------------------=-----------------+ 
|                 =      bin 9       =                 |
+----10-----------=------------------=-----------10----+
|                 =      bin 8       =                 |
+----20-----------=------------------=-----------20----+
|                 =      bin 7       =                 |
+----30-----------=------------------=-----------30----+
|                 =      bin 6       =                 |
+----40-----------=------------------=-----------40----+
|                 =      bin 5       =                 |
+----50-----------=------------------=-----------50----+
|                 =      bin 4       =                 |
+----40-----------=------------------=-----------40----+
|                 =      bin 3       =                 |
+----30-----------=------------------=-----------30----+
|                 =      bin 2       =                 |
+----20-----------=------------------=-----------20----+
|                 =      bin 1       =                 |
+----10-----------=------------------=-----------10----+
|                 =      bin 0       =                 |
+-----------------=------------------=-----------------+
|                       Attacking                      |
|                         Team                         |
+-----------------------#------#-----------------------+

*/

//---- Model Setup ----//

// The current down. The attacking team starts with 1st down.
var down = 1;

/* Starting position for the attacking team.
We split the field into 10 yard bins, so the starting position is the bin number.
The attacking team starts at the 20 yard line, so the starting bin is 2. */
var bin = 2;

/* The conditions to check the probability of the attacking team reaching a 
particular bin from the starting bin. */
#define YARD_0 bin == 0;
#define YARD_10 bin == 1;
#define YARD_20 bin == 2;
#define YARD_30 bin == 3;
#define YARD_40 bin == 4;
#define YARD_50 bin == 5;
#define YARD_60 bin == 6;
#define YARD_70 bin == 7;
#define YARD_80 bin == 8;
#define YARD_90 bin == 9;
#define YARD_100 bin == 10;

/* The condition to check the probability of the attacking team using up all 4
downs without gaining a first down or has reached the last bin. */
#define GAME_OVER down > 4 || YARD_100;

/* The actions (plays) available per down. These can be extended in the future.
RUN_SUCCESS and PASS_SUCCESS are used to model a run or pass that refreshes
the down. This is to model the fact that a team can run or pass multiple times
in a row without losing the ball but have not gained enough yards for a first down. */
enum { RUN, PASS, PUNT, PASS_SUCCESS, RUN_SUCCESS, TOUCHDOWN, FIELD_GOAL, TURNOVER };

//---- End Model Setup ----//

//---- Probabilities Setup ----//

/* For this simple model, we have 8 different sets of probabilities for the
attacking team. The probabilities are defined in the form of x_y_z, where
x: The side of the field the attacking team is on. home or away.
y: The down number.
z: The play. run, pass, punt, pass_SUCCESS, run_SUCCESS, touchdown, field_goal, turnover.
We need to model the fact that teams have conservative play calling in their half 
of the field, and aggressive play calling in the away half of the field. 
In addition, the 4th down where the team is more likely to kick the ball.
We might extend it to consider a more granular probability i.e. per 10 yards, or
model in the defensive team. */

#define KC_1ST_RUN 367;
#define KC_1ST_PASS 335;
#define KC_1ST_PUNT 0;
#define KC_1ST_PASS_SUCCESS 174;
#define KC_1ST_RUN_SUCCESS 66;
#define KC_1ST_TOUCHDOWN 4;
#define KC_1ST_FIELD_GOAL 0;
#define KC_1ST_TURNOVER 5;

#define KC_2ND_RUN 120;
#define KC_2ND_PASS 240;
#define KC_2ND_PUNT 0;
#define KC_2ND_PASS_SUCCESS 210;
#define KC_2ND_RUN_SUCCESS 79;
#define KC_2ND_TOUCHDOWN 2;
#define KC_2ND_FIELD_GOAL 0;
#define KC_2ND_TURNOVER 3;

#define KC_3RD_RUN 26;
#define KC_3RD_PASS 133;
#define KC_3RD_PUNT 0;
#define KC_3RD_PASS_SUCCESS 118;
#define KC_3RD_RUN_SUCCESS 42;
#define KC_3RD_TOUCHDOWN 2;
#define KC_3RD_FIELD_GOAL 0;
#define KC_3RD_TURNOVER 1;

#define KC_4TH_RUN 1;
#define KC_4TH_PASS 30;
#define KC_4TH_PUNT 142;
#define KC_4TH_PASS_SUCCESS 3;
#define KC_4TH_RUN_SUCCESS 5;
#define KC_4TH_TOUCHDOWN 0;
#define KC_4TH_FIELD_GOAL 0;
#define KC_4TH_TURNOVER 0;

#define OPP_1ST_RUN 295;
#define OPP_1ST_PASS 315;
#define OPP_1ST_PUNT 0;
#define OPP_1ST_PASS_SUCCESS 85;
#define OPP_1ST_RUN_SUCCESS 52;
#define OPP_1ST_TOUCHDOWN 70;
#define OPP_1ST_FIELD_GOAL 4;
#define OPP_1ST_TURNOVER 8;

#define OPP_2ND_RUN 122;
#define OPP_2ND_PASS 231;
#define OPP_2ND_PUNT 0;
#define OPP_2ND_PASS_SUCCESS 136;
#define OPP_2ND_RUN_SUCCESS 81;
#define OPP_2ND_TOUCHDOWN 61;
#define OPP_2ND_FIELD_GOAL 3;
#define OPP_2ND_TURNOVER 11;

#define OPP_3RD_RUN 34;
#define OPP_3RD_PASS 146;
#define OPP_3RD_PUNT 0;
#define OPP_3RD_PASS_SUCCESS 88;
#define OPP_3RD_RUN_SUCCESS 43;
#define OPP_3RD_TOUCHDOWN 53;
#define OPP_3RD_FIELD_GOAL 4;
#define OPP_3RD_TURNOVER 5;

#define OPP_4TH_RUN 3;
#define OPP_4TH_PASS 11;
#define OPP_4TH_PUNT 27;
#define OPP_4TH_PASS_SUCCESS 13;
#define OPP_4TH_RUN_SUCCESS 7;
#define OPP_4TH_TOUCHDOWN 5;
#define OPP_4TH_FIELD_GOAL 83;
#define OPP_4TH_TURNOVER 12;

//---- End Probabilities Setup ----//

GuardedDown = [!GAME_OVER]Go->ExecuteDown;

// Guarded process that only runs the next down if the attacking team has not completed all 4.
NextPlay = GuardedDown[][GAME_OVER] Skip;

// Function to simulate a single down. Only executes if the attacking team has not used all 4 downs.
ExecuteDown = case {
	down == 1: case {
		bin < 5: ChooseAction(KC_1ST_RUN, KC_1ST_PASS, KC_1ST_PUNT, KC_1ST_PASS_SUCCESS, KC_1ST_RUN_SUCCESS, KC_1ST_TOUCHDOWN, KC_1ST_FIELD_GOAL, KC_1ST_TURNOVER)
		bin >= 5: ChooseAction(OPP_1ST_RUN, OPP_1ST_PASS, OPP_1ST_PUNT, OPP_1ST_PASS_SUCCESS, OPP_1ST_RUN_SUCCESS, OPP_1ST_TOUCHDOWN, OPP_1ST_FIELD_GOAL, OPP_1ST_TURNOVER)
	}
	down == 2: case {
		bin < 5: ChooseAction(KC_2ND_RUN, KC_2ND_PASS, KC_2ND_PUNT, KC_2ND_PASS_SUCCESS, KC_2ND_RUN_SUCCESS, KC_2ND_TOUCHDOWN, KC_2ND_FIELD_GOAL, KC_2ND_TURNOVER)
		bin >= 5: ChooseAction(OPP_2ND_RUN, OPP_2ND_PASS, OPP_2ND_PUNT, OPP_2ND_PASS_SUCCESS, OPP_2ND_RUN_SUCCESS, OPP_2ND_TOUCHDOWN, OPP_2ND_FIELD_GOAL, OPP_2ND_TURNOVER)
	}
	down == 3: case {
		bin < 5: ChooseAction(KC_3RD_RUN, KC_3RD_PASS, KC_3RD_PUNT, KC_3RD_PASS_SUCCESS, KC_3RD_RUN_SUCCESS, KC_3RD_TOUCHDOWN, KC_3RD_FIELD_GOAL, KC_3RD_TURNOVER)
		bin >= 5: ChooseAction(OPP_3RD_RUN, OPP_3RD_PASS, OPP_3RD_PUNT, OPP_3RD_PASS_SUCCESS, OPP_3RD_RUN_SUCCESS, OPP_3RD_TOUCHDOWN, OPP_3RD_FIELD_GOAL, OPP_3RD_TURNOVER)
	}
	down == 4: case {
		bin < 5: ChooseAction(KC_4TH_RUN, KC_4TH_PASS, KC_4TH_PUNT, KC_4TH_PASS_SUCCESS, KC_4TH_RUN_SUCCESS, KC_4TH_TOUCHDOWN, KC_4TH_FIELD_GOAL, KC_4TH_TURNOVER)
		bin >= 5: ChooseAction(OPP_4TH_RUN, OPP_4TH_PASS, OPP_4TH_PUNT, OPP_4TH_PASS_SUCCESS, OPP_4TH_RUN_SUCCESS, OPP_4TH_TOUCHDOWN, OPP_4TH_FIELD_GOAL, OPP_4TH_TURNOVER)
	}
};

ChooseAction(_run, _pass, _punt, _pass_success, _run_success, _touchdown, _field_goal, _turnover) = pcase {
	_run: { down++; } -> NextPlay
	_pass: { down++; } -> NextPlay
	_punt: { down = 5; } -> NextPlay // Game over
	_pass_success: { down = 1; bin++ } -> NextPlay
	_run_success: { down = 1; bin++ } -> NextPlay
	_touchdown: { down = 5; bin = 10 } -> NextPlay // Game over
	_field_goal: { down = 5; bin = 10 } -> NextPlay // Game over
	_turnover: { down = 5; } -> NextPlay // Game over
};

# assert NextPlay deadlockfree;

// Only YARD_x > starting position are relevant
# assert NextPlay reaches YARD_0 with prob; 
# assert NextPlay reaches YARD_10 with prob;
# assert NextPlay reaches YARD_20 with prob;
# assert NextPlay reaches YARD_30 with prob;
# assert NextPlay reaches YARD_40 with prob;
# assert NextPlay reaches YARD_50 with prob;
# assert NextPlay reaches YARD_60 with prob;
# assert NextPlay reaches YARD_70 with prob;
# assert NextPlay reaches YARD_80 with prob;
# assert NextPlay reaches YARD_90 with prob;
# assert NextPlay reaches YARD_100 with prob;